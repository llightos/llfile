// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package file_logic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperateItClient is the client API for OperateIt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperateItClient interface {
	Test(ctx context.Context, in *OperateFolderReq, opts ...grpc.CallOption) (*OperateFolderRes, error)
}

type operateItClient struct {
	cc grpc.ClientConnInterface
}

func NewOperateItClient(cc grpc.ClientConnInterface) OperateItClient {
	return &operateItClient{cc}
}

func (c *operateItClient) Test(ctx context.Context, in *OperateFolderReq, opts ...grpc.CallOption) (*OperateFolderRes, error) {
	out := new(OperateFolderRes)
	err := c.cc.Invoke(ctx, "/file_logic.operate_it/test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperateItServer is the server API for OperateIt service.
// All implementations must embed UnimplementedOperateItServer
// for forward compatibility
type OperateItServer interface {
	Test(context.Context, *OperateFolderReq) (*OperateFolderRes, error)
	mustEmbedUnimplementedOperateItServer()
}

// UnimplementedOperateItServer must be embedded to have forward compatible implementations.
type UnimplementedOperateItServer struct {
}

func (UnimplementedOperateItServer) Test(context.Context, *OperateFolderReq) (*OperateFolderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedOperateItServer) mustEmbedUnimplementedOperateItServer() {}

// UnsafeOperateItServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperateItServer will
// result in compilation errors.
type UnsafeOperateItServer interface {
	mustEmbedUnimplementedOperateItServer()
}

func RegisterOperateItServer(s grpc.ServiceRegistrar, srv OperateItServer) {
	s.RegisterService(&OperateIt_ServiceDesc, srv)
}

func _OperateIt_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperateItServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_logic.operate_it/test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperateItServer).Test(ctx, req.(*OperateFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OperateIt_ServiceDesc is the grpc.ServiceDesc for OperateIt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperateIt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_logic.operate_it",
	HandlerType: (*OperateItServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "test",
			Handler:    _OperateIt_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filelogic.proto",
}
